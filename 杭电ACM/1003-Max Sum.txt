Problem Description
Given a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.

 

Input
The first line of the input contains an integer T(1<=T<=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1<=N<=100000), then N integers followed(all the integers are between -1000 and 1000).

 

Output
For each test case, you should output two lines. The first line is "Case #:", # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.

 

Sample Input
2
5 6 -1 5 4 -7
7 0 6 -1 1 -6 7 -5
 

Sample Output
Case 1:
14 1 4

Case 2:
7 1 6
 
//CODE
import java.util.Scanner;

public class Main{

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        int m=N;
        
        while(N-->0){
            int temp=1,max=-1001,sum=0,num,start=1,end=1;
            int numCount=sc.nextInt();
            for(int i=1;i<=numCount;i++){
                num=sc.nextInt();
                sum += num;
                if(sum>max){
                    max=sum;
                    start=temp;
                    end=i;
                }
                if(sum<0){
                    sum=0;
                    temp=i+1;
                }
            }//for
            System.out.println("Case "+(m-N)+":");
            System.out.println(max+" "+start+" "+end);
            if(N!=0)
                System.out.println("");
        }
    }

}
