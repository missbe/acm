Description

n people wish to cross a bridge at night. A group of at most two people may cross at any time, and each group must have a flashlight. Only one flashlight is available among the n people, so some sort of shuttle arrangement must be arranged in order to return the flashlight so that more people may cross. 
Each person has a different crossing speed; the speed of a group is determined by the speed of the slower member. Your job is to determine a strategy that gets all n people across the bridge in the minimum time. 
Input

The first line of input contains n, followed by n lines giving the crossing times for each of the people. There are not more than 1000 people and nobody takes more than 100 seconds to cross the bridge.
Output

The first line of output must contain the total number of seconds required for all n people to cross the bridge. The following lines give a strategy for achieving this time. Each line contains either one or two integers, indicating which person or people form the next group to cross. (Each person is indicated by the crossing time specified in the input. Although many people may have the same crossing time the ambiguity is of no consequence.) Note that the crossings alternate directions, as it is necessary to return the flashlight so that more may cross. If more than one strategy yields the minimal time, any one will do.
Sample Input

4
1
2
5
10
Sample Output

17
1 2
1
5 10
2
1 2
//CODE

#include<cstdio>
#include<algorithm>////sort所用到的算法加上命名空间
#include<cstring>
using namespace std;
/*
算法思想：最快的两个分别为A.B最慢的两个人时间为a,b.
两种方案[1]用最快的一个人带最慢的两个人，可
以保证返回的时间是最小的，时间是慢的人所要的时间。时间
表示为:time=A+a+A+b;这样返回时间最快不能保证过桥时间最
快。[2]最快的两个人带最慢的两个人，返回时间是A+B。过桥
时间为B+b,可以把两个慢的人放在一起过桥，解决第一种方案
时间问题。时间为time=B+A+b+B.两种方案时间进行比较，取小
的方案。每一次快的人带最慢的两个人[n -= 2].最后剩下两个
人或者三个人，两个人为A.B，三个为A.B.a.所用分别为:B|a+A+B;
*/
int n,j,i,k,a[111111];
int ans=0;///n个人过桥的总时间
int main(){
	scanf("%d",&n);
	for(i=1;i<=n;i++) ///输入每个人的速度
		scanf("%d",a+i);
	if(n==1){ //一个人的过桥方案
	   printf("%d\n%d\n",a[1],a[1]);
	   return 0;
	}
	int nn=n;
	sort(a+1,a+n+1);///按时间进行大小排序
	while(n > 3){ ///在人数大于3的时候进行循环
		if(a[1]+a[n-1]<2*a[2]){///第一个方案更优
		   ans += a[n]+a[1]*2+a[n-1];
		}else{
		   ans += a[2]*2+a[1]+a[n];
		}
		n -= 2; //两个最慢的人员过桥
	}
	if(2==n){ ///剩下两个人时
		ans += a[2];
	}else{ ///剩下三个人时
	   ans += a[1]+a[2]+a[3];
	}
	printf("%d\n",ans);
	n=nn;
	while(n>3){///输出方案
		if(a[1]+a[n-1]<2*a[2]){////最快的一个带最慢两个的方案
		   printf("%d %d\n%d\n%d %d\n%d\n",a[1],a[n],a[1],a[1],a[n-1],a[1]);
		}else{///最快两个带最慢两个方案
		   printf("%d %d\n%d\n%d %d\n%d\n",a[1],a[2],a[1],a[n-1],a[n],a[2]);
		}
		n -= 2;
	}
	if(2==n){///两个的方案
		printf("%d %d\n",a[1],a[2]);
	}else{///三个的方案
	   printf("%d %d\n%d\n%d %d\n%d\n",a[1],a[3],a[1],a[1],a[2]);
	}
	return 0;
}