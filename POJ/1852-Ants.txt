Description

An army of ants walk on a horizontal pole of length l cm, each with a constant speed of 1 cm/s. When a walking ant reaches an end of the pole, it immediatelly falls off it. When two ants meet they turn back and start walking in opposite directions. We know the original positions of ants on the pole, unfortunately, we do not know the directions in which the ants are walking. Your task is to compute the earliest and the latest possible times needed for all ants to fall off the pole.
Input

The first line of input contains one integer giving the number of cases that follow. The data for each case start with two integer numbers: the length of the pole (in cm) and n, the number of ants residing on the pole. These two numbers are followed by n integers giving the position of each ant on the pole as the distance measured from the left end of the pole, in no particular order. All input integers are not bigger than 1000000 and they are separated by whitespace.
Output

For each case of input, output two numbers separated by a single space. The first number is the earliest possible time when all ants fall off the pole (if the directions of their walks are chosen appropriately) and the second number is the latest possible such time. 
Sample Input

2
10 3
2 6 7
214 7
11 12 7 13 176 23 191
Sample Output

4 8
38 207
//CODE
#include<cstdio>
/*
算法思想：将相遇转向更改相遇后互不干扰相当于另一只蚂蚁
代替自己向一直向一边走，简化过程给出逻辑判断条件:
little=min{li,L-li},big=max{li,L-li}
*/
int c,big,little,L,i,j,k,n;
int main(){
	scanf("%d",&c);
	while(c-- &&(2==scanf("%d%d",&L,&n))){///输入蚂蚁数目和横竿长度
	  big=little=0;
	  for(i=0;i<n;i++){
	     scanf("%d",&k);///蚂蚁在横竿上的位置
		 if(k>big)
			 big=k;
		 if(L-k > big) ///根据k左方和右方长度调整最大时间
			 big=L-k;
		 if(k > L-k)
			 k=L-k;
		 if(k>little)  ////由k左右长度的最小值调整最早时间
			 little=k;
	  }
	  printf("%d %d\n",little,big);///输出最早时间和最晚时间
	}
	return 0;
}