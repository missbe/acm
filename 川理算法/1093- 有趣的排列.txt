题目描述
大家知道，给出正整数n，则1到n这n个数可以构成n！种排列，把这些排列按照从小到大的顺序（字典顺序）列出，如n=3时，列出1 2 3，1 3 2，2 1 3，2 3 1，3 1 2，3 2 1六个排列。 

任务描述： 给出某个排列，求出这个排列的下k个排列，如果遇到最后一个排列，则下1排列为第1个排列，即排列1 2 3…n。 

比如：n = 3，k=2 给出排列2 3 1，则它的下1个排列为3 1 2，下2个排列为3 2 1，因此答案为3 2 1。 


输入
第一行是一个正整数m，表示测试数据的个数，下面是m组测试数据，每组测试数据第一行是2个正整数n( 1 <= n < 1024 )和k(1<=k<=64)，第二行有n个正整数，是1，2 … n的一个排列。

输出
对于每组输入数据，输出一行，n个数，中间用空格隔开，表示输入排列的下k个排列。

样例输入
3
3 1
2 3 1
3 1
3 2 1
10 2
1 2 3 4 5 6 7 8 9 10

样例输出
3 1 2
1 2 3
1 2 3 4 5 6 7 9 8 10

//CODE
#include<cstdio>
#include<cstring>
#include<cassert>
#define M 65
#define __int64 long long 

int a[M],N,k;///输入的数据
long long s,p[M];///s获取编号p保存编号

long long get_per(int *a){
   int i,j;
   long long c,ret=0;
   for(i=0;i<N-1;i++){
     c=0;
	 for(j=i+1;j<N;j++)
		 if(a[j] > a[i])
			 c++;
	 ret += c*p[N-i-1];
   }
   return ret;
}
void set_per(int *a,long long key){
   int i,h[M],j,k;
   memset(h,0,sizeof(h));

 //  printf("Key:%d\n",key);
   for(i=0;i<N;i++){
     for(k=0;key>=p[N-i-1];k++,key -= p[N-i-1])
		 ;
	 for(j=N;j>0;j--){
	    if(0==h[j])
			k--;
		if(k<0)
			break;
	 }
	 a[i]=j;
	 h[j]=1;
   }
}
int main(){
    int i,count;
	p[0]=p[1]=1;
	for(i=2;i<=M-1;i++)
		p[i]=i*p[i-1];

	scanf("%d",&count);
	while(count--){
		scanf("%d %d",&N,&k);
		assert(N>=1 && N<=1024);
		assert(k<=64 && k>=1);

	    for(i=0;i<N;i++)
			scanf("%d",&a[i]);
		s=get_per(a);
	//	printf("S:%d\n",s);
		if(s-k <0 ){
	//		printf("%d\n",-(s-k));
	//		printf("%d\n",p[N]+(s-k));
		    s=p[N]+(s-k);
	//		set_per(a,s);
		}else{
		   s -= k;
	//	   set_per(a,s);
		}
		set_per(a,s);
		for(i=0;i<N;i++)
			printf("%d%c",a[i],i==N-1?'\n':' ');
	}
	return 0;
}