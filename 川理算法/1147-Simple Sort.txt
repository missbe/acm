题目描述
Give some strings that consist of “0” and “1”, you sort them by the number of “1” in the string, and if they have the same number , then sort by the position of the “1” appears, the more lately ‘1’ appears, the string is the more “bigger” of . such as the string “00110” should stand behind the string “11000”, “111001” should stand behind the string “111010”. The output should remain they original order to those strings that has no ‘1’ at all. 
输入
The first line N is the number of strings(N<=100). The next N lines is the strings to be sort. ( the length of each string is less than 100 )
输出
The sorted strings 
样例输入
8
000
000111000
1100001
101100001
0000000
000110001
101110
00000
样例输出
000
0000000
00000
1100001
000111000
000110001
101110
101100001
//CODE
#include<cstdio> 
#include<cstring> 
struct Sort{ 
    int index[101]; 
    int oneCount; 
    char str[101]; 
}; 
int main(){ 
    char str[101]; 
    int count,index,i,number,N,k,j; 
    Sort *p,temp; 
  
      
    scanf("%d",&number);
    count=0,index=0,i=0; 
    N=number; 
    p=new Sort[number]; 
  
    while(number--){ 
        scanf("%s",str); 
        while(str[i]!='\0'){ 
            if('1'==str[i]){ 
                count++; 
                p[N-number-1].index[index++]=i; 
            } 
            i++; 
        } 
        p[N-number-1].oneCount=count; 
        strcpy(p[N-number-1].str,str); 
        i=0; 
        index=0; 
        count=0; 
    } 
  
    for(i=0;i<N-1;i++){ 
        k=i; 
        if(p[k].oneCount!=0){ 
           for(j=i+1;j<N;j++){ 
             if(p[j].oneCount==0){ 
                 k=j; 
                 break; 
             }else if(p[j].oneCount==p[k].oneCount){ 
                    for(int m=0;m<p[k].oneCount;m++) 
                      if(p[j].index[m]< p[k].index[m]){ 
                         k=j; 
                         break; 
                      }else if(p[j].index[m]> p[k].index[m]){ 
                         break; 
                      } 
			 }else if(p[j].oneCount<p[k].oneCount){ 
                k=j; 
             } 
           } 
        } 
      if(k!=i){ 
          temp=p[i]; 
          p[i]=p[k]; 
          p[k]=temp; 
      } 
    } 
    for(i=0;i<N;i++) 
        printf("%s\n",p[i].str); 
    delete p; 
	return 0;
} 
