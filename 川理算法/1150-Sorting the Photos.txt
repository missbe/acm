题目描述
Imagine you have a pile of 1<=N<=10^5 photos. Some of them are faced upwards and the others faced downwards. Your goal is to sort them so all the photos are faced the same direction. The only operation you are allowed to do is to take any amount of the photos from the top into the separate pile, turn that pile upside-down as the whole and put it back over the rest of original pile.
Write the program that calculates the minimum number of such operations needed to complete the sorting goal.
This problem contains multiple test cases!
The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.
The output format consists of N output blocks. There is a blank line between output blocks.
输入
First line of the input contains the only number. Then, characters going possibly separated by newline and/or space characters "D" - faced down or "U" - faced up.
输出
Single integer number - minimal number of flip operations required to sort the photos pile.
样例输入
1
5
UU D
UU
样例输出
2
//CODE
#include<cstdio>
bool isEnd(char *ch,int N);

int main(){
	int N,n,test;
	char p;
	char *ch,*temp;
	int i,j,k,index,count;
/*	char mm[]={'D','D','D','D','D'};

	if(isEnd(mm,5))
		printf("True\n");
	else
		printf("Flase\n");*/
	scanf("%d",&N);
	while(N--){
		scanf("%d",&n);
		ch=new char[n];
		temp=new char[n];
		index=0;
		while(true){
			scanf("%d",&test);
			scanf("%c",&p);
			if(p!=' '){
				ch[index++]=p;
			}
			if(index==n)
				break;
		}
		count=0;
		while(!isEnd(ch,n)){
			if(ch[0]=='U'){
				index=0;
				for(i=1;ch[i]=='U';i++){
					temp[index++]='D';
				}
				for(k=i;k<n;k++)
					ch[k-i]=ch[k];
				k=index;
				for(j=n-index;j<n && k<index;j++)
					ch[j]=temp[k++];
			}else if(ch[0]=='D'){
				 index=0;
				for(i=1;ch[i]=='D';i++){
					temp[index++]='U';
				}
				for(k=i;k<n;k++)
					ch[k-i]=ch[k];
				k=index;
				for(j=n-index;j<n && k<index;j++)
					ch[j]=temp[k++];
			}
			count++;
		}
		printf("%d \n",count);
	/*	for(i=0;i<n;i++){
			printf("%c ",ch[i]);
		}
	    printf("\n");*/
		delete ch;
	}
	return 0;
}
bool isEnd(char *ch,int N){
	int i;
	if(ch[0]=='U'){
		for(i=1;i<N;i++){
			if(ch[i]=='D'){
				break;
			}
		}
		if(i==N)
			return true;
	}
	if(ch[0]=='D'){
		for(i=1;i<N;i++){
			if(ch[i]=='U'){
				break;
			}
		}
		if(i==N)
			return true;
	}
	return false;
}
